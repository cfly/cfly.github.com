---
layout: post
status: publish
published: true
title: '[转载]正则表达式'
author_url: http://caofei.org
wordpress_id: 48
wordpress_url: http://caofei.wordpress.com/2005/10/24/%e8%bd%ac%e8%bd%bd%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f
date: '2005-10-24 02:19:32 +0800'
date_gmt: '2005-10-23 18:19:32 +0800'
categories:
- 计算机与 Internet
tags: []
comments: []
---
<div id="msgcns!66CD003054696B87!468" class="bvMsg">
<div>想必很多人都对正则表达式都头疼.今天,我以我的认识,加上网上一些文章,希望用常人都可以理解的表达方式.来和大家分享学习经验. <br />  开篇,还是得说说 ^  和  $  他们是分别用来匹配字符串的开始和结束，以下分别举例说明 <br />&quot;^The&quot;: 开头一定要有&quot;The&quot;字符串; <br />&quot;of despair$&quot;:  结尾一定要有&quot;of despair&quot; 的字符串; <br />那么,<br />&quot;^abc$&quot;: 就是要求以abc开头和以abc结尾的字符串，实际上是只有abc匹配 <br />&quot;notice&quot;: 匹配包含notice的字符串 <br />你可以看见如果你没有用我们提到的两个字符（最后一个例子），就是说 模式（正则表达式） 可以出现在被检验字符串的任何地方，你没有把他锁定到两边 <br />接着,说说 '*', '+',和 '?', <br />他们用来表示一个字符可以出现的次数或者顺序. 他们分别表示：<br />&quot;zero or more&quot;相当于&#123;0,&#125;, <br />&quot;one or more&quot;相当于&#123;1,&#125;, <br />&quot;zero or one.&quot;相当于&#123;0,1&#125;,  这里是一些例子: <br />&quot;ab*&quot;:  和ab&#123;0,&#125;同义,匹配以a开头,后面可以接0个或者N个b组成的字符串(&quot;a&quot;, &quot;ab&quot;, &quot;abbb&quot;, 等); <br />&quot;ab+&quot;: 和ab&#123;1,&#125;同义,同上条一样，但最少要有一个b存在 (&quot;ab&quot;, &quot;abbb&quot;, 等.); <br />&quot;ab?&quot;:和ab&#123;0,1&#125;同义,可以没有或者只有一个b; <br />&quot;a?b+$&quot;: 匹配以一个或者0个a再加上一个以上的b结尾的字符串. <br />要点, '*', '+',和 '?'只管它前面那个字符.<br />你也可以在大括号里面限制字符出现的个数，比如 <br />&quot;ab&#123;2&#125;&quot;: 要求a后面一定要跟两个b（一个也不能少）(&quot;abb&quot;); <br />&quot;ab&#123;2,&#125;&quot;: 要求a后面一定要有两个或者两个以上b(如&quot;abb&quot;, &quot;abbbb&quot;, 等.); <br />&quot;ab&#123;3,5&#125;&quot;: 要求a后面可以有2－5个b(&quot;abbb&quot;, &quot;abbbb&quot;, or &quot;abbbbb&quot;). </div>
<div>现在我们把一定几个字符放到小括号里，比如：<br />&quot;a(bc)*&quot;: 匹配 a 后面跟0个或者一个&quot;bc&quot;; <br />&quot;a(bc)&#123;1,5&#125;&quot;: 一个到5个 &quot;bc.&quot; <br />还有一个字符 '│', 相当于OR 操作: <br />&quot;hi│hello&quot;: 匹配含有&quot;hi&quot; 或者 &quot;hello&quot; 的 字符串; <br />&quot;(b│cd)ef&quot;: 匹配含有 &quot;bef&quot; 或者 &quot;cdef&quot;的字符串; <br />&quot;(a│b)*c&quot;: 匹配含有这样多个（包括0个）a或b，后面跟一个c <br />的字符串; <br />一个点('.')可以代表所有的单一字符,不包括&quot;n&quot;<br />如果,要匹配包括&quot;n&quot;在内的所有单个字符,怎么办?<br />对了,用'[n.]'这种模式.<br />&quot;a.[0-9]&quot;: 一个a加一个字符再加一个0到9的数字 <br />&quot;^.&#123;3&#125;$&quot;: 三个任意字符结尾 . </div>
<div>中括号括住的内容只匹配一个单一的字符 <br />&quot;[ab]&quot;: 匹配单个的 a 或者 b ( 和 &quot;a│b&quot; 一样); <br />&quot;[a-d]&quot;: 匹配'a' 到'd'的单个字符 (和&quot;a│b│c│d&quot; 还有 &quot;[abcd]&quot;效果一样); 一般我们都用[a-zA-Z]来指定字符为一个大小写英文<br />&quot;^[a-zA-Z]&quot;: 匹配以大小写字母开头的字符串 <br />&quot;[0-9]%&quot;: 匹配含有 形如 x％ 的字符串 <br />&quot;,[a-zA-Z0-9]$&quot;: 匹配以逗号再加一个数字或字母结尾的字符串 <br />你也可以把你不想要得字符列在中括号里，你只需要在总括号里面使用'^' 作为开头 &quot;%[^a-zA-Z]%&quot; 匹配含有两个百分号里面有一个非字母的字符串. <br />要点:^用在中括号开头的时候,就表示排除括号里的字符 <br />为了PHP能够解释，你必须在这些字符面前后加'',并且将一些字符转义. <br />不要忘记在中括号里面的字符是这条规路的例外—在中括号里面, 所有的特殊字符，包括(''), 都将失去他们的特殊性质 &quot;[*+?&#123;&#125;.]&quot;匹配含有这些字符的字符串.<br /> 还有,正如regx的手册告诉我们: &quot;如果列表里含有 ']', 最好把它作为列表里的第一个字符(可能跟在'^'后面). 如果含有'-', 最好把它放在最前面或者最后面, or 或者一个范围的第二个结束点[a-d-0-9]中间的‘-’将有效. <br />看了上面的例子,你对&#123;n,m&#125;应该理解了吧.要注意的是,n和m都不能为负整数,而且n总是小于m. 这样,才能 最少匹配n次且最多匹配m次. 如&quot;p&#123;1,5&#125;&quot;将匹配 &quot;pvpppppp&quot;中的前五个p<br />下面说说以开头的<br />b 书上说他是用来匹配一个单词边界,就是...比如'veb',可以匹配love里的ve而不匹配very里有ve<br />B 正好和上面的b相反.例子我就不举了<br />.....突然想起来....可以到<a href="http://www.phpv.net/article.php/251">http://www.phpv.net/article.php/251</a> 看看其它用 开头的语法</div>
<div>好,我们来做个应用:<br />如何构建一个模式来匹配 货币数量 的输入 <br />构建一个匹配模式去检查输入的信息是否为一个表示money的数字。我们认为一个表示money的数量有四种方式： &quot;10000.00&quot; 和 &quot;10,000.00&quot;,或者没有小数部分, &quot;10000&quot; and &quot;10,000&quot;. 现在让我们开始构建这个匹配模式: <br />^[1-9][0-9]*$ <br />这是所变量必须以非0的数字开头.但这也意味着 单一的 &quot;0&quot; 也不能通过测试. 以下是解决的方法: <br />^(0│[1-9][0-9]*)$ <br />&quot;只有0和不以0开头的数字与之匹配&quot;，我们也可以允许一个负号在数字之前: <br />^(0│-?[1-9][0-9]*)$ <br />这就是: &quot;0 或者 一个以0开头 且可能 有一个负号在前面的数字.&quot; 好了,现在让我们别那么严谨，允许以0开头.现在让我们放弃 负号 , 因为我们在表示钱币的时候并不需要用到. 我们现在指定 模式 用来匹配小数部分: <br />^[0-9]+(.[0-9]+)?$ <br />这暗示匹配的字符串必须最少以一个阿拉伯数字开头. 但是注意，在上面模式中 &quot;10.&quot; 是不匹配的, 只有 &quot;10&quot; 和 &quot;10.2&quot; 才可以. （你知道为什么吗） <br />^[0-9]+(.[0-9]&#123;2&#125;)?$ <br />我们上面指定小数点后面必须有两位小数.如果你认为这样太苛刻,你可以改成: <br />^[0-9]+(.[0-9]&#123;1,2&#125;)?$ <br />这将允许小数点后面有一到两个字符. 现在我们加上用来增加可读性的逗号（每隔三位）, 我们可以这样表示: <br />^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$ <br />不要忘记 '+' 可以被 '*' 替代 如果你想允许空白字符串被输入话 (为什么?). 也不要忘记反斜杆 ’’ 在php字符串中可能会出现错误 (很普遍的错误). <br />现在，我们已经可以确认字符串了, 我们现在把所有逗号都去掉 str_replace(&quot;,&quot;, &quot;&quot;, $money) 然后在把类型看成 double然后我们就可以通过他做数学计算了. <br />再来一个:<br />构造检查email的正则表达式 <br /> 在一个完整的email地址中有三个部分: <br />1. 用户名 (在 <a href="mailto:'@'">'@'</a> 左边的一切), <br /><a href="mailto:2.'@'">2.'@'</a>,<br />3. 服务器名(就是剩下那部分). <br />用户名可以含有大小写字母阿拉伯数字,句号 ('.'), 减号('-'), and 下划线 ('_'). 服务器名字也是符合这个规则,当然下划线除外. <br />现在, 用户名的开始和结束都不能是句点. 服务器也是这样. 还有你不能有两个连续的句点他们之间至少存在一个字符，好现在我们来看一下怎么为用户名写一个匹配模式: <br />^[_a-zA-Z0-9-]+$ <br />现在还不能允许句号的存在. 我们把它加上: <br />^[_a-zA-Z0-9-]+(.[_a-zA-Z0-9-]+)*$ <br />上面的意思就是说: &quot;以至少一个规范字符（除了.）开头,后面跟着0个或者多个以点开始的字符串.&quot; <br />简单化一点, 我们可以用 eregi()取代 ereg().eregi()对大小写不敏感, 我们就不需要指定两个范围 &quot;a-z&quot; 和 &quot;A-Z&quot; – 只需要指定一个就可以了: <br />^[_a-z0-9-]+(.[_a-z0-9-]+)*$ <br />后面的服务器名字也是一样,但要去掉下划线: <br />^[a-z0-9-]+(.[a-z0-9-]+)*$ <br />好. 现在只需要用”@”把两部分连接: <br />^[_a-z0-9-]+(.[_a-z0-9-]+)*@[a-z0-9-]+(.[a-z0-9-]+)*$ <br />这就是完整的email认证匹配模式了,只需要调用 <br />eregi(‘^[_a-z0-9-]+(.[_a-z0-9-]+)*@[a-z0-9-]+(.[a-z0-9-]+)*$ ’,$eamil) <br />就可以得到是否为email了 <br />正则表达式的其他用法 <br />提取字符串 <br />ereg() and eregi() 有一个特性是允许用户通过正则表达式去提取字符串的一部分(具体用法你可以阅读手册). 比如说,我们想从 path/URL 提取文件名 – 下面的代码就是你需要: <br />ereg(&quot;([^\/]*)$&quot;, $pathOrUrl, $regs); <br />echo $regs[1]; <br />高级的代换 <br />ereg_replace() 和 eregi_replace()也是非常有用的: 假如我们想把所有的间隔负号都替换成逗号: <br />ereg_replace(&quot;[ nrt]+&quot;, &quot;,&quot;, trim($str));<br />最后,我把另一串检查EMAIL的正则表达式让看文章的你来分析一下.<br />&quot;^[-!#$%&amp;'*+\./0-9=?A-Z^_`a-z&#123;|&#125;~]+'.'@'.'[-!#$%&amp;'*+\/0-9=?A-Z^_`a-z&#123;|&#125;~]+.'.'[-!#$%&amp;'*+\./0-9=?A-Z^_`a-z&#123;|&#125;~]+$&quot;<br />如果能方便的读懂,那这篇文章的目的就达到了.</div>
</div>
